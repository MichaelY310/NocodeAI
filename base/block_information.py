import inspect

import numpy
import torch
import torch.optim as optimizer
import typing

from torch import nn
from torchvision.transforms import transforms
import torch.nn.functional as F

layer_map = {
    "Linear": torch.nn.Linear,
    "Conv2d": torch.nn.Conv2d,
    "ReLU": torch.nn.ReLU,
    "Sigmoid": torch.nn.Sigmoid,
    "Tanh": torch.nn.Tanh,
    "BatchNorm2d": torch.nn.BatchNorm2d,
    "MaxPool2d": torch.nn.MaxPool2d,
    "Upsample": torch.nn.Upsample,
    "ConvTranspose2d": torch.nn.ConvTranspose2d,
}

layer_info_map = {
    "Linear": "",
    "Conv2d": "",
    "ReLU": "",
    "Sigmoid": "",
    "Tanh": "",
    "BatchNorm2d": "",
    "MaxPool2d": "",
    "Upsample": "",
    "ConvTranspose2d": "",
}

device_choice = {
    "cpu": "cpu",
    "gpu": "cuda",
}

# Complete
dtype_choice = {
    "torch.float16": torch.float16,
    "torch.float32": torch.float32,
    "torch.float64": torch.float64,
    "torch.float": torch.float,
    "torch.half": torch.half,
    "torch.double": torch.double,
    "torch.uint8": torch.uint8,
    "torch.int8": torch.int8,
    "torch.int16": torch.int16,
    "torch.int32": torch.int32,
    "torch.int64": torch.int64,
    "torch.long": torch.long,
    "torch.short": torch.short,
    "torch.bool": torch.bool,
    "torch.complex64": torch.complex64,
    "torch.complex128": torch.complex128,
    "torch.bfloat16": torch.bfloat16,
    "torch.qint8": torch.qint8,
    "torch.quint8": torch.quint8,
    "torch.qint32": torch.qint32,
}

default_value_handlers_map = {
    inspect._empty: None,
    None: None,
    type(None): None,
    str: "",
    int: 0,
    float: 0.01,
    bool: False,
    list: [],
    callable: None,
    dict: {},
    any: None,
    numpy.ndarray: None,
    torch.Tensor: torch.tensor([1, 2, 3, 4], dtype=torch.float32),
    torch.FloatTensor: torch.FloatTensor([1, 2, 3, 4]),
    torch.dtype: torch.float,
    typing.Tuple[int, ...]: (0, ),
    typing.Tuple[int]: (0, ),
    typing.Tuple[int, int]: (0, 0, ),
    typing.Tuple[int, int, int]: (0, 0, 0, ),
    typing.Optional[int]: None,
    typing.Optional[str]: None,
    typing.Optional[float]: None,
    typing.Optional[bool]: None,
    torch.utils.data.Sampler: None,
    torch._C.Generator: None,
}

# Complete
image_transformations_map = {
    'ToTensor': transforms.ToTensor,
    'PILToTensor': transforms.PILToTensor,
    'ConvertImageDtype': transforms.ConvertImageDtype,
    'ToPILImage': transforms.ToPILImage,
    'Normalize': transforms.Normalize,
    'Resize': transforms.Resize,
    'CenterCrop': transforms.CenterCrop,
    'Pad': transforms.Pad,
    'Lambda': transforms.Lambda,
    'RandomApply': transforms.RandomApply,
    'RandomChoice': transforms.RandomChoice,
    'RandomOrder': transforms.RandomOrder,
    'RandomCrop': transforms.RandomCrop,
    'RandomHorizontalFlip': transforms.RandomHorizontalFlip,
    'RandomVerticalFlip': transforms.RandomVerticalFlip,
    'RandomResizedCrop': transforms.RandomResizedCrop,
    'FiveCrop': transforms.FiveCrop,
    'TenCrop': transforms.TenCrop,
    'LinearTransformation': transforms.LinearTransformation,
    'ColorJitter': transforms.ColorJitter,
    'RandomRotation': transforms.RandomRotation,
    'RandomAffine': transforms.RandomAffine,
    'Grayscale': transforms.Grayscale,
    'RandomGrayscale': transforms.RandomGrayscale,
    'RandomPerspective': transforms.RandomPerspective,
    'RandomErasing': transforms.RandomErasing,
    'GaussianBlur': transforms.GaussianBlur,
    'InterpolationMode': transforms.InterpolationMode,
    'RandomInvert': transforms.RandomInvert,
    'RandomPosterize': transforms.RandomPosterize,
    'RandomSolarize': transforms.RandomSolarize,
    'RandomAdjustSharpness': transforms.RandomAdjustSharpness,
    'RandomAutocontrast': transforms.RandomAutocontrast,
    'RandomEqualize': transforms.RandomEqualize,
    'ElasticTransform': transforms.ElasticTransform,
}

image_transformations_info_map = {
    'ToTensor': "",
    'PILToTensor': "",
    'ConvertImageDtype': "",
    'ToPILImage': "",
    'Normalize': "",
    'Resize': "",
    'CenterCrop': "",
    'Pad': "",
    'Lambda': "",
    'RandomApply': "",
    'RandomChoice': "",
    'RandomOrder': "",
    'RandomCrop': "",
    'RandomHorizontalFlip': "",
    'RandomVerticalFlip': "",
    'RandomResizedCrop': "",
    'FiveCrop': "",
    'TenCrop': "",
    'LinearTransformation': "",
    'ColorJitter': "",
    'RandomRotation': "",
    'RandomAffine': "",
    'Grayscale': "",
    'RandomGrayscale': "",
    'RandomPerspective': "",
    'RandomErasing': "",
    'GaussianBlur': "",
    'InterpolationMode': "",
    'RandomInvert': "",
    'RandomPosterize': "",
    'RandomSolarize': "",
    'RandomAdjustSharpness': "",
    'RandomAutocontrast': "",
    'RandomEqualize': "",
    'ElasticTransform': "",
}

# Complete
loss_function_map = {
    "MSELoss": nn.MSELoss,
    "CrossEntropyLoss": nn.CrossEntropyLoss,
    "BCELoss": nn.BCELoss,
    "L1Loss": nn.L1Loss,
    "CTCLoss": nn.CTCLoss,
    "AdaptiveLogSoftmaxWithLoss": nn.AdaptiveLogSoftmaxWithLoss,
    "BCEWithLogitsLoss": nn.BCEWithLogitsLoss,
    "CosineEmbeddingLoss": nn.CosineEmbeddingLoss,
    "GaussianNLLLoss": nn.GaussianNLLLoss,
    "HingeEmbeddingLoss": nn.HingeEmbeddingLoss,
    "HuberLoss": nn.HuberLoss,
    "KLDivLoss": nn.KLDivLoss,
    "MarginRankingLoss": nn.MarginRankingLoss,
    "MultiLabelMarginLoss": nn.MultiLabelMarginLoss,
    "MultiLabelSoftMarginLoss": nn.MultiLabelSoftMarginLoss,
    "MultiMarginLoss": nn.MultiMarginLoss,
    "NLLLoss": nn.NLLLoss,
    "PoissonNLLLoss": nn.PoissonNLLLoss,
    "SoftMarginLoss": nn.SoftMarginLoss,
    "TripletMarginLoss": nn.TripletMarginLoss,
    "TripletMarginWithDistanceLoss": nn.TripletMarginWithDistanceLoss,
    "NLLLoss2d": nn.NLLLoss2d,
    "SmoothL1Loss": nn.SmoothL1Loss
}

loss_function_info_map = {
    "MSELoss": "",
    "CrossEntropyLoss": "",
    "BCELoss": "",
    "L1Loss": "",
    "CTCLoss": "",
    "AdaptiveLogSoftmaxWithLoss": "",
    "BCEWithLogitsLoss": "",
    "CosineEmbeddingLoss": "",
    "GaussianNLLLoss": "",
    "HingeEmbeddingLoss": "",
    "HuberLoss": "",
    "KLDivLoss": "",
    "MarginRankingLoss": "",
    "MultiLabelMarginLoss": "",
    "MultiLabelSoftMarginLoss": "",
    "MultiMarginLoss": "",
    "NLLLoss": "",
    "PoissonNLLLoss": "",
    "SoftMarginLoss": "",
    "TripletMarginLoss": "",
    "TripletMarginWithDistanceLoss": "",
    "NLLLoss2d": "",
    "SmoothL1Loss": ""
}

optimizer_map = {
    "Adadelta": torch.optim.Adadelta,
    "Adagrad": torch.optim.Adagrad,
    "Adam": torch.optim.Adam,
    "Adamax": torch.optim.Adamax,
    "AdamW": torch.optim.AdamW,
    "ASGD": torch.optim.ASGD,
    "LBFGS": torch.optim.LBFGS,
    "NAdam": torch.optim.NAdam,
    "Optimizer": torch.optim.Optimizer,
    "RAdam": torch.optim.RAdam,
    "RMSprop": torch.optim.RMSprop,
    "Rprop": torch.optim.Rprop,
    "SGD": torch.optim.SGD,
    "SparseAdam": torch.optim.SparseAdam,
}

optimizer_info_map = {
    "Adadelta": "",
    "Adagrad": "",
    "Adam": "",
    "Adamax": "",
    "AdamW": "",
    "ASGD": "",
    "LBFGS": "",
    "NAdam": "",
    "Optimizer": "",
    "RAdam": "",
    "RMSprop": "",
    "Rprop": "",
    "SGD": "",
    "SparseAdam": "",
}